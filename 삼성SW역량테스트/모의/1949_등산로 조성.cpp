#include<iostream>
#include <queue>
using namespace std;

int dx[4] = { 0, 1, 0, -1 };
int dy[4] = { 1, 0, -1, 0 };
int N, K;
int board[9][9];
int maxHeight;

bool OOB(const int& x, const int& y)
{
	return (x < 0 || x >= N || y < 0 || y >= N);
}

int BFS(int copiedBoard[9][9])
{
	int maxDist = 0;
	int dist[9][9] = { };
	queue<pair<int, int>> q;

	for (int i = 0; i < N; ++i)
	{
		for (int j = 0; j < N; ++j)
		{
			if (copiedBoard[i][j] == maxHeight)
			{
				q.push({ i, j });
				dist[i][j] = 1;
			}
		}
	}

	while (!q.empty())
	{
		pair<int, int> cur = q.front();
		q.pop();

		for (int dir = 0; dir < 4; ++dir)
		{
			int curX = cur.first + dx[dir];
			int curY = cur.second + dy[dir];

			if (OOB(curX, curY) == true)
			{
				continue;
			}

			if (copiedBoard[curX][curY] < copiedBoard[cur.first][cur.second] && dist[curX][curY] <= dist[cur.first][cur.second])
			{
				q.push({ curX, curY });
				dist[curX][curY] = dist[cur.first][cur.second] + 1;
				maxDist = max(dist[curX][curY], maxDist);
			}
			// 1. 높이가 현재 위치보다 낮음
			// 2. dist가 현재 dist보다 작거나 같음
			// 두 조건을 만족하면 큐에 삽입한다
		}
	}

	return maxDist;
}

int main(int argc, char** argv)
{
	int test_case;
	int T;
	/*
	   아래의 freopen 함수는 input.txt 를 read only 형식으로 연 후,
	   앞으로 표준 입력(키보드) 대신 input.txt 파일로부터 읽어오겠다는 의미의 코드입니다.
	   //여러분이 작성한 코드를 테스트 할 때, 편의를 위해서 input.txt에 입력을 저장한 후,
	   freopen 함수를 이용하면 이후 cin 을 수행할 때 표준 입력 대신 파일로부터 입력을 받아올 수 있습니다.
	   따라서 테스트를 수행할 때에는 아래 주석을 지우고 이 함수를 사용하셔도 좋습니다.
	   freopen 함수를 사용하기 위해서는 #include <cstdio>, 혹은 #include <stdio.h> 가 필요합니다.
	   단, 채점을 위해 코드를 제출하실 때에는 반드시 freopen 함수를 지우거나 주석 처리 하셔야 합니다.
	*/
	//freopen("input.txt", "r", stdin);
	cin >> T;
	/*
	   여러 개의 테스트 케이스가 주어지므로, 각각을 처리합니다.
	*/
	for (test_case = 1; test_case <= T; ++test_case)
	{
		maxHeight = 0;
		cin >> N >> K;
		for (int i = 0; i < N; ++i)
		{
			for (int j = 0; j < N; ++j)
			{
				cin >> board[i][j];
				if (board[i][j] > maxHeight)
				{
					maxHeight = board[i][j];
				}
			}
		}


		int maxDist = BFS(board);
		// 일반 BFS 수행
		for (int k = 1; k <= K; ++k)
		{
			for (int x = 0; x < N; ++x)
			{
				for (int y = 0; y < N; ++y)
				{
					board[x][y] -= k;
					maxDist = max(BFS(board), maxDist);
					board[x][y] += k;
				}
			}
		}
		// 5 * 64 * 64

		cout << "#" << test_case << ' ' << maxDist << '\n';

	}
	return 0;//정상종료시 반드시 0을 리턴해야합니다.
}